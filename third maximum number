class Solution {
public:
    int thirdMax(vector<int>& nums) {
        set<int> s;
        for(auto x:nums){
            s.insert(x);
        }
        nums.clear();
        for(auto it=s.begin();it!=s.end();it++){
            nums.push_back(*it);
        }
        int n=nums.size();
        if(n==1){
            return nums[0];
        }
        else if(n==2){
            return max(nums[0],nums[1]);
        }
        else{
            int max1=*max_element(nums.begin(),nums.end());
            for(int i=0;i<n;i++){
                if(nums[i]==max1){
                    nums[i]=INT_MIN;
                }
            }
            int max2=*max_element(nums.begin(),nums.end());
            for(int i=0;i<n;i++){
                if(nums[i]==max2){
                    nums[i]=INT_MIN;
                    
                }
            }
            return *max_element(nums.begin(),nums.end());
        }
    }
    
    
    or
    
    class Solution {
public:
    int thirdMax(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n=nums.size();
        int max=nums.back();
        int cnt=1;
        for(int i=n-2;i>=0;i--){
            if(nums[i]<max){
                cnt++;
                max=nums[i];
            }
            if(cnt==3){
                break;
            }
        }
        if(cnt<3) return nums.back();
        else return max;
        
        }
    };
    
    or
    
    class Solution {
public:
    int thirdMax(vector<int>& nums) {
        long long int max1=-10000000000;
        long long int max2=-10000000000;
        long long int max3=-10000000000;
        int n=nums.size();
        for(int i=0;i<n;i++){
            if(nums[i]>max1){
                max3=max2;
                max2=max1;
                max1=nums[i];
            }
            else if(nums[i]>max2 && nums[i]!=max1){
                max3=max2;
                max2=nums[i];
            }
            else if(nums[i]>max3 && nums[i]!=max2 && nums[i]!=max1){
                max3=nums[i];
            }
        }
        return max3!=-10000000000?max3:max1;
        }
    };

};

